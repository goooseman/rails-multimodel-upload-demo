



<%= form_for @item,  :html => { :multipart => true, :id => "fileupload"  } do |f| %>
  <% if @item.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@item.errors.count, "error") %> prohibited this item from being saved:</h2>

      <ul>
      <% @item.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
<div class="input-group">
  <div class="field">
    <%= f.label :name %><br>
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :model %><br>
    <%= f.text_field :model %>
  </div>
  <div class="field">
    <%= f.label :price %><br>
    <%= f.number_field :price %>
  </div>

  <div class="row fileupload-buttonbar">
      <div class="span7"> 
        <span class="btn btn-success fileinput-button">
          <i class="glyphicon glyphicon-plus glyphicon-white"></i>
          <input type="file" class="form-control"  name="item[uploads_attributes][][upload]" multiple>Select
        </span>
        <button type="submit" class="btn btn-primary start" onclick="submit()">
              <i class="glyphicon glyphicon-upload glyphicon-white"></i>
              <span>OK</span>
        </button>
      </div>
      
    </div>
    <table class="table table-striped"><tbody class="files" data-toggle="modal-gallery" data-target="#modal-gallery"></tbody>
    </table>


</div>
 

<% end %>


<script>
    var fileUploadErrors = {
    maxFileSize: 'File is too big',
    minFileSize: 'File is too small',
    acceptFileTypes: 'Filetype not allowed',
    maxNumberOfFiles: 'Max number of files exceeded',
    uploadedBytes: 'Uploaded bytes exceed file size',
    emptyResult: 'Empty file upload result'
    };
  </script>

  <!-- The template to display files available for upload -->
  <script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
      <td class="preview"><span class="fade"></span></td>
      <td class="name"><span>{%=file.name%}</span></td>
      <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
      {% if (file.error) { %}
      <td class="error" colspan="2"><span class="label label-important">{%=locale.fileupload.error%}</span> {%=locale.fileupload.errors[file.error] || file.error%}</td>
      {% } else if (o.files.valid && !i) { %}
      <td>
        <div class="progress progress-success progress-striped active"><div class="bar progress-bar" style="width:0%;"></div></div>
      </td>
      <td class="start" style="display:none">{% if (!o.options.autoUpload) { %}
        <button class="btn btn-primary">
          <i class="icon-upload icon-white"></i>
          <span>{%=locale.fileupload.start%}</span>
        </button>
        {% } %}</td>
      {% } else { %}
      <td colspan="2"></td>
      {% } %}
      <td class="cancel">{% if (!i) { %}
        <button class="btn btn-warning" onclick="minus()">
          <i class="icon-ban-circle icon-white"></i>
          <span>{%=locale.fileupload.cancel%}</span>
        </button>
        {% } %}</td>
    </tr>
    {% } %}
  </script>
  <!-- The template to display files available for download -->
  <script id="template-download" type="text/x-tmpl">
    
  </script>

  <script type="text/javascript" charset="utf-8">
    var num_added = 0;
    var added = 0;
    var all_data = {};
    function minus() {
      num_added--;
    };
    function submit() {
      if (num_added == 0) {
        document.forms["fileupload"].submit();
      }
      
    };
    $(function () {
        // Initialize the jQuery File Upload widget:
        $('#fileupload').fileupload({
          complete: function (e, data) {
            window.location = "<%= root_url %>";
        },
          singleFileUploads: false
        })  .bind('fileuploadadd', function (e, data) {num_added++;})
            .bind('fileuploadsubmit', function (e, data) {
             if(added < num_added)
                  {
                  if (added == 0)
                      all_data = data;
                  else
                      {
                      $.each(data['files'], function(i, file){
                      all_data['files'].push(file);
                      });
                      $.each(data['context'], function(i, context){
                      all_data['context'].push(context);
                      });
                      }
                  added++;
                  if (added == num_added)
                      {
                      added++;
                      all_data.submit();
                      }
                  return false;
              }
            })
            .bind('fileuploadsend', function (e, data) {num_added = 0; added = 0;});
            
        // 
        // Load existing files:
        $.getJSON($('#fileupload').prop('action'), function (files) {
          var fu = $('#fileupload').data('blueimpFileupload'), 
            template;
          fu._adjustMaxNumberOfFiles(-files.length);
          console.log(files);
          template = fu._renderDownload(files)
            .appendTo($('#fileupload .files'));
          // Force reflow:
          fu._reflow = fu._transition && template.length &&
            template[0].offsetWidth;
          template.addClass('in');
          $('#loading').remove();
        });

    });
  </script>

